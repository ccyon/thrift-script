#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class AccessPointType(object):
    """
    Defines the type of the access point
    """
    PICKUP = 0
    DROPOFF = 1

    _VALUES_TO_NAMES = {
        0: "PICKUP",
        1: "DROPOFF",
    }

    _NAMES_TO_VALUES = {
        "PICKUP": 0,
        "DROPOFF": 1,
    }


class AccessPointLevel(object):
    """
    Defines the level of the access point
    """
    GLOBAL = 0
    PERSONAL = 1

    _VALUES_TO_NAMES = {
        0: "GLOBAL",
        1: "PERSONAL",
    }

    _NAMES_TO_VALUES = {
        "GLOBAL": 0,
        "PERSONAL": 1,
    }


class Coordinate(object):
    """
    Attributes:
     - latitude
     - longitude
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'latitude', None, None, ),  # 1
        (2, TType.DOUBLE, 'longitude', None, None, ),  # 2
    )

    def __init__(self, latitude=None, longitude=None,):
        self.latitude = latitude
        self.longitude = longitude

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.latitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.longitude = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Coordinate')
        if self.latitude is not None:
            oprot.writeFieldBegin('latitude', TType.DOUBLE, 1)
            oprot.writeDouble(self.latitude)
            oprot.writeFieldEnd()
        if self.longitude is not None:
            oprot.writeFieldBegin('longitude', TType.DOUBLE, 2)
            oprot.writeDouble(self.longitude)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.latitude is None:
            raise TProtocolException(message='Required field latitude is unset!')
        if self.longitude is None:
            raise TProtocolException(message='Required field longitude is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccessPoint(object):
    """
    Represents a navigable access point

    Attributes:
     - id: Optional stable, unique id representing this access point
     - coordinate: Precise coordinate of the access point
     - types: Identifies what categories this access point belongs to
     - label: Human readable label for this access point
     - level: Identifies which level this access point belongs to
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'coordinate', (Coordinate, Coordinate.thrift_spec), None, ),  # 2
        (3, TType.SET, 'types', (TType.I32, None, False), None, ),  # 3
        (4, TType.STRING, 'label', 'UTF8', None, ),  # 4
        (5, TType.I32, 'level', None, None, ),  # 5
    )

    def __init__(self, id=None, coordinate=None, types=None, label=None, level=None,):
        self.id = id
        self.coordinate = coordinate
        self.types = types
        self.label = label
        self.level = level

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.coordinate = Coordinate()
                    self.coordinate.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.types = set()
                    (_etype3, _size0) = iprot.readSetBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.types.add(_elem5)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.label = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccessPoint')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.coordinate is not None:
            oprot.writeFieldBegin('coordinate', TType.STRUCT, 2)
            self.coordinate.write(oprot)
            oprot.writeFieldEnd()
        if self.types is not None:
            oprot.writeFieldBegin('types', TType.SET, 3)
            oprot.writeSetBegin(TType.I32, len(self.types))
            for iter6 in self.types:
                oprot.writeI32(iter6)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.label is not None:
            oprot.writeFieldBegin('label', TType.STRING, 4)
            oprot.writeString(self.label.encode('utf-8') if sys.version_info[0] == 2 else self.label)
            oprot.writeFieldEnd()
        if self.level is not None:
            oprot.writeFieldBegin('level', TType.I32, 5)
            oprot.writeI32(self.level)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccessPoints(object):
    """
    Convenience struct for encapsulating AccessPoints

    Attributes:
     - accessPoints
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'accessPoints', (TType.STRUCT, (AccessPoint, AccessPoint.thrift_spec), False), None, ),  # 1
    )

    def __init__(self, accessPoints=None,):
        self.accessPoints = accessPoints

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.accessPoints = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = AccessPoint()
                        _elem12.read(iprot)
                        self.accessPoints.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccessPoints')
        if self.accessPoints is not None:
            oprot.writeFieldBegin('accessPoints', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.accessPoints))
            for iter13 in self.accessPoints:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TimeInterval(object):
    """
    Represents a time interval

    Attributes:
     - startTimestamp: Start timestamp of the interval
     - endTimestamp: end timestamp of the interval
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I64, 'startTimestamp', None, None, ),  # 1
        (2, TType.I64, 'endTimestamp', None, None, ),  # 2
    )

    def __init__(self, startTimestamp=None, endTimestamp=None,):
        self.startTimestamp = startTimestamp
        self.endTimestamp = endTimestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.startTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.endTimestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TimeInterval')
        if self.startTimestamp is not None:
            oprot.writeFieldBegin('startTimestamp', TType.I64, 1)
            oprot.writeI64(self.startTimestamp)
            oprot.writeFieldEnd()
        if self.endTimestamp is not None:
            oprot.writeFieldBegin('endTimestamp', TType.I64, 2)
            oprot.writeI64(self.endTimestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccessPointOverride(object):
    """
    Represents an access point override

    Attributes:
     - id: Optional unique id representing this access point override
     - timeInterval: Precise timestamp of this override
     - type: Identifies what categories (pickup/dropoff) this override will work
     - accessPoints: access points to replace the usual ones
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'timeInterval', (TimeInterval, TimeInterval.thrift_spec), None, ),  # 2
        (3, TType.I32, 'type', None, None, ),  # 3
        (4, TType.STRUCT, 'accessPoints', (AccessPoints, AccessPoints.thrift_spec), None, ),  # 4
    )

    def __init__(self, id=None, timeInterval=None, type=None, accessPoints=None,):
        self.id = id
        self.timeInterval = timeInterval
        self.type = type
        self.accessPoints = accessPoints

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.timeInterval = TimeInterval()
                    self.timeInterval.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.accessPoints = AccessPoints()
                    self.accessPoints.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccessPointOverride')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.timeInterval is not None:
            oprot.writeFieldBegin('timeInterval', TType.STRUCT, 2)
            self.timeInterval.write(oprot)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.accessPoints is not None:
            oprot.writeFieldBegin('accessPoints', TType.STRUCT, 4)
            self.accessPoints.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccessPointOverrides(object):
    """
    Convenience struct for encapsulating AccessPointOverride

    Attributes:
     - accessPointsOverrides
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'accessPointsOverrides', (TType.STRUCT, (AccessPointOverride, AccessPointOverride.thrift_spec), False), None, ),  # 1
    )

    def __init__(self, accessPointsOverrides=None,):
        self.accessPointsOverrides = accessPointsOverrides

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.accessPointsOverrides = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = AccessPointOverride()
                        _elem19.read(iprot)
                        self.accessPointsOverrides.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccessPointOverrides')
        if self.accessPointsOverrides is not None:
            oprot.writeFieldBegin('accessPointsOverrides', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.accessPointsOverrides))
            for iter20 in self.accessPointsOverrides:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AccessPointOverrideRequest(object):
    """
    Attributes:
     - provider
     - id
     - locale
     - overrides
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'provider', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'id', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'locale', 'UTF8', None, ),  # 3
        (4, TType.STRUCT, 'overrides', (AccessPointOverrides, AccessPointOverrides.thrift_spec), None, ),  # 4
    )

    def __init__(self, provider=None, id=None, locale=None, overrides=None,):
        self.provider = provider
        self.id = id
        self.locale = locale
        self.overrides = overrides

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.provider = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.locale = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.overrides = AccessPointOverrides()
                    self.overrides.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AccessPointOverrideRequest')
        if self.provider is not None:
            oprot.writeFieldBegin('provider', TType.STRING, 1)
            oprot.writeString(self.provider.encode('utf-8') if sys.version_info[0] == 2 else self.provider)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 2)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.locale is not None:
            oprot.writeFieldBegin('locale', TType.STRING, 3)
            oprot.writeString(self.locale.encode('utf-8') if sys.version_info[0] == 2 else self.locale)
            oprot.writeFieldEnd()
        if self.overrides is not None:
            oprot.writeFieldBegin('overrides', TType.STRUCT, 4)
            self.overrides.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
